================
TimeSeries types
================

The *TimeSeries* is a data structure/object. It can be “subclassed” to represent more narrowly focused modalities (e.g.,
electrical versus optical physiology) as well as new modalities (eg, video tracking of whisker positions). When it a
*TimeSeries* is subclassed, new datasets can be added while all datasets of parent classes are preserved. An initial set of subclasses are described here. Users are free to define subclasses for their particular requirements.

**AnnotationSeries** extends *TimeSeries*
-----------------------------------------

Stores, eg, user annotations made during an experiment. The *TimeSeries::data[]* field stores a text array, and
timestamps are stored for each annotation (ie, interval=1). This is largely an alias to a standard *TimeSeries* but that is identifiable as annotation in a machine-readable way.

**IntervalSeries** extends *TimeSeries*
---------------------------------------
Stores intervals of data. The timestamp field stores the beginning and end of intervals. The data field stores whether
the interval just started (>0 value) or ended (<0 value). Different interval types can be represented in the same series
by using multiple key values (eg, 1 for feature A, 2 for feature B, 3 for feature C, etc). The field data stores an
8-bit integer. This is largely an alias of a standard *TimeSeries* but that is identifiable as representing time intervals in a machine-readable way.

**PatchClampSeries** extends *TimeSeries*
-----------------------------------------
Stores stimulus or response current or voltage. These are regular *TimeSeries* except for the addition of the following field:

+-------------------------------+------------+--------------------------------------------------------------------+
| Dataset name                  | Type       | Description and comments                                           |
+===============================+============+====================================================================+
| electrode_name                | text       | Name of electrode entry in /general/intracellular                  |
+-------------------------------+------------+--------------------------------------------------------------------+
| gain                          | float      | Units: Volt/Amp (v-clamp) or Volt/Volt (c-clamp)                   |
+-------------------------------+------------+--------------------------------------------------------------------+
| initial_access_resistance     | float      | Units: Ohms                                                        |
+-------------------------------+------------+--------------------------------------------------------------------+
| seal                          | float      | Units: Ohms                                                        |
+-------------------------------+------------+--------------------------------------------------------------------+


~ **VoltageClampStimulusSeries** extends *PatchClampSeries*
-----------------------------------------------------------
Aliases to standard *PatchClampSeries*. Its functionality is to better tag *PatchClampSeries* for machine (and human) readability of the file.

~ **CurrentClampStimulusSeries** extends *PatchClampSeries*
-----------------------------------------------------------
Aliases to standard *PatchClampSeries*. Its functionality is to better tag *PatchClampSeries* for machine (and human) readability of the file.

~ **VoltageClampSeries** extends *PatchClampSeries*
---------------------------------------------------
Stores current data recorded from intracellular voltage-clamp recordings. A corresponding *VoltageClampStimulusSeries* (stored separately as a stimulus) is used to store the voltage injected. 
The *VoltageClampSeries* has all of the datasets of an *PatchClampSeries* as well as the following:

+-----------------------------------+--------+--------------------------------------------------------------------+
| Dataset name                      | Type   | Description and comments                                           |
+===================================+========+====================================================================+
| capacitance_fast                  | float  | Units: Farads                                                      |
+-----------------------------------+--------+--------------------------------------------------------------------+
| capacitance_slow                  | float  | Units: Farads                                                      |
+-----------------------------------+--------+--------------------------------------------------------------------+
| resistance_comp_bandwidth         | float  | Units: Hz                                                          |
+-----------------------------------+--------+--------------------------------------------------------------------+
| resistance_comp_correction        | float  | Units: %                                                           |
+-----------------------------------+--------+--------------------------------------------------------------------+
| resistance_comp_prediction        | float  | Units: %                                                           |
+-----------------------------------+--------+--------------------------------------------------------------------+
| whole_cell_capacitance_comp       | float  | Units: Farads                                                      |
+-----------------------------------+--------+--------------------------------------------------------------------+
| whole_cell_series_resistance_comp | float  | Units: Ohms                                                        |
+-----------------------------------+--------+--------------------------------------------------------------------+

~ **CurrentClampSeries** extends *PatchClampSeries*
---------------------------------------------------
Stores voltage data recorded from intracellular current-clamp recordings. A corresponding *CurrentClampStimulusSeries*
(stored separately as a stimulus) is used to store the current injected. 
The *CurrentClampSeries* has all of the datasets of an *PatchClampSeries* as well as the following:

+-----------------------------------+--------+--------------------------------------------------------------------+
| Dataset name                      | Type   | Description and comments                                           |
+===================================+========+====================================================================+
| bias_current                      | float  | Units: Amps                                                        |
+-----------------------------------+--------+--------------------------------------------------------------------+
| bridge_balance                    | float  | Units: Ohms                                                        |
+-----------------------------------+--------+--------------------------------------------------------------------+
| capacitance_compensation          | float  | Units: Farads                                                      |
+-----------------------------------+--------+--------------------------------------------------------------------+

**ElectricalSeries** extends *TimeSeries*
-----------------------------------------
Stores acquired voltage data from and extracellular recordings. The data field of an *ElectricalSeries* is an int or float
array. *Array structure: [num time samples][num channels]*. It contains all of the datasets of the basic *TimeSeries* as well as the following:

+-------------------------------+------------+--------------------------------------------------------------------+
| Dataset name                  | Type       | Description and comments                                           |
+===============================+============+====================================================================+
| electrode_idx                 | int array  | Indices to electrodes described in the experiment's electrode map  |
|                               |            | array (extracellular recordings under /general).                   |
+-------------------------------+------------+--------------------------------------------------------------------+


~ **SpikeEventSeries** extends *ElectricalSeries*
-------------------------------------------------
Stores “snapshots” of spike events (i.e., threshold crossings) in data. 
This may also be raw data, as reported by ephys hardware. 
If so, the *TimeSeries::description* field should describing how events were detected. 
A *SpikeEventSeries* can also store derived event data that resides in a module. 
All events span the same recording channels and store snapshots of equal duration. 
Source of data should be provided in *TimeSeries::description*.
*TimeSeries::data* *array structure: [num events][num channels][num samples]*. 


**ImageSeries** extends *TimeSeries*
------------------------------------
General image data that is common between acquisition and stimulus time series. Sometimes the image data is stored in
the HDF5 file in a raw format while other times it will be stored as an external image file in the host file system. The
data field will either be binary data or empty. *TimeSeries::data* *array structure: [frame][y][x] (or
[frame][z][y][x])*. The *ImageSeries* contains all of the datasets of the *TimeSeries* as well as the following:

+----------------------+------------+-----------------------------------------------------------------------------+
| Dataset name         | Type       | Description and comments                                                    |
+======================+============+=============================================================================+
| format               | text       | Format of image. If this is “external” then the field external_file         |
|                      |            | contains the path or URL information to that file. For tiff, png, jpg,      |
|                      |            | etc, the binary representation of the image is stored in data. If the       |
|                      |            | format is “raw” then the fields bit_per_pixel and dimension are used. For   |
|                      |            | raw images, only a single channel is stored (eg, red)                       |
+----------------------+------------+-----------------------------------------------------------------------------+
| external_file        | text       | Path or URL to external file. Field only present if format="external"       |
+----------------------+------------+-----------------------------------------------------------------------------+
| bits_per_pixel       | int        | Number of bits per image pixel                                              |
+----------------------+------------+-----------------------------------------------------------------------------+
| dimension            | int array  | Number of pixels on x, y (and z) axes                                       |
+----------------------+------------+-----------------------------------------------------------------------------+


~ **ImageMaskSeries** extends *ImageSeries*
-------------------------------------------
An alpha mask that is applied to a presented visual stimulus. The data[] array contains an array of mask values that are applied to the displayed image. Mask values are stored as RGBA. 

+----------------------+------------+-----------------------------------------------------------------------------+
| Dataset name         | Type       | Description and comments                                                    |
+======================+============+=============================================================================+
| source_image         | text       | Path to *ImageSeries* that mask is applied to                               |
+----------------------+------------+-----------------------------------------------------------------------------+

~ **OpticalSeries** extends *ImageSeries*
-----------------------------------------
Image data that is presented or recorded. A stimulus template movie will be stored only as an image. When the image is
presented as stimulus, additional data is required, such as field of view (eg, how much of the visual field the image
covers, or how what is the area of the target being imaged). If the *OpticalSeries* represents acquired imaging data,
orientation is also important. The *OpticalSeries* has all datasets of the *ImageSeries* as well as the following

+---------------------+-------------+-----------------------------------------------------------------------------+
| Dataset name        | Type        | Description and comments                                                    |
+=====================+=============+=============================================================================+
| field_of_view       | float array | Width, height and depto of image, or imaged area (meters)                   |
+---------------------+-------------+-----------------------------------------------------------------------------+
| distance            | float       | Distance from camera/monitor to target/eye                                  |
+---------------------+-------------+-----------------------------------------------------------------------------+
| orientation         | text        | Description of image relative to some reference frame (e.g., which way is   |
|                     |             | up). Must also specify frame of reference                                   |
+---------------------+-------------+-----------------------------------------------------------------------------+


~ ~ **TwoPhotonSeries** extends *OpticalSeries*
-----------------------------------------------
A special case of optical imaging. The *TwoPhotonSeries* has all the datasets of the *OpticalSeries* as well as the following:

+---------------------+-------------+-----------------------------------------------------------------------------+
| Dataset name        | Type        | Description and comments                                                    |
+=====================+=============+=============================================================================+
| max_voltage         | float       | Units: Volts                                                                |
+---------------------+-------------+-----------------------------------------------------------------------------+
| min_voltage         | float       | Units: Volts                                                                |
+---------------------+-------------+-----------------------------------------------------------------------------+
| pmt_gain            | float       | Photomultiplier gain                                                        |
+---------------------+-------------+-----------------------------------------------------------------------------+
| wavelength          | float       | Laser wavlength. Units: nm or meters                                        |
+---------------------+-------------+-----------------------------------------------------------------------------+
| indicator           | text        | Imaging indicator (e.g., GCaMP6s) and response wavelength                   |
+---------------------+-------------+-----------------------------------------------------------------------------+
| imaging_depth       | float       | Imaging depth into tissue (i.e., below surface). Units: Meters              |
+---------------------+-------------+-----------------------------------------------------------------------------+
| scan_line_rate      | float       | Scan lines per second (Hz)                                                  |
+---------------------+-------------+-----------------------------------------------------------------------------+


**ImageIndexSeries** extends *TimeSeries*
-----------------------------------------
Stores indices to image frames stored in an *ImageSeries*. The purpose of the *ImageIndexSeries* is to allow a static
image stack to be stored somewhere, and the images in the stack to be referenced out-of-order. This can be for the
display of individual images, or of movie segments (as a movie is simply a series of images). The data field stores the
index of the frame in the referenced *ImageSeries*, and the timestamps array indicates when that image was displayed.
The *ImageIndexSeries* containes all datasets of *TimeSeries* plus the following:

+---------------------+-------------+-----------------------------------------------------------------------------+
| Dataset name        | Type        | Description and comments                                                    |
+=====================+=============+=============================================================================+
| image_stack         | text        | Path to *ImageSeries* containing images that are indexed                    |
+---------------------+-------------+-----------------------------------------------------------------------------+

**SpatialSeries** extends *TimeSeries*
--------------------------------------
Direction, e.g., of gaze or travel, or position. The *TimeSeries::data* field is a 2-D array storing position or
direction relative to some reference frame. *Array structure: [num measurements] [num dimensions]*. Each *SpatialSeries*
has a text dataset reference_frame that indicates the zero-position, or the zero-axes for direction. For example, if
representing gaze direction, “straight-ahead” might be a specific pixel on the monitor, or some other point in space.
For position data, the 0,0 point might be the top-left corner of an enclosure, as viewed from the tracking camera. The
units of data will indicate how to interpret *SpatialSeries* values. A *SpatialSeries* has all the datasets of a
*TimeSeries* plus the following:

+---------------------+-------------+-----------------------------------------------------------------------------+
| Dataset name        | Type        | Description and comments                                                    |
+=====================+=============+=============================================================================+
| reference_frame     | text        | Description defining what exactly "straight-ahead" means                    |
+---------------------+-------------+-----------------------------------------------------------------------------+


**AbstractFeatureSeries** extends *TimeSeries*
----------------------------------------------
Abstract features, such as quantitative descriptions of sensory stimuli. The *TimeSeries::data* field is a 2-D array,
storing those features (e.g., for visual grating stimulus this might be orientation, spatial frequency and contrast).
*Array structure: [num frames] [num features]*.

+---------------------+-------------+-----------------------------------------------------------------------------+
| Dataset name        | Type        | Description and comments                                                    |
+=====================+=============+=============================================================================+
| feature_description | text array  | Description of the features represented in *TimeSeries::data*               |
+---------------------+-------------+-----------------------------------------------------------------------------+


